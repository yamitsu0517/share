package com.example.demo.web.admin;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.demo.common.DataNotFoundException;
import com.example.demo.common.FlashData;
import com.example.demo.entity.Category;
import com.example.demo.entity.Event;
import com.example.demo.entity.User;
import com.example.demo.service.EventService;
import com.example.demo.service.EventUserService;
import com.example.demo.service.UserService;

import jakarta.validation.Valid;

@Controller
@RequestMapping ("/admin/events")
public class EventsController {
    @Autowired
    UserService userService;
    @Autowired
    EventService eventService;
    @Autowired
    EventUserService eventUserService;
    
    /**
     * 初期表示
     * 
     * @param  user
     * @param  model
     * @return
     */
    @GetMapping (value = "/")
    public String list (User user, Model model) {
        List<Event> events = eventService.findAll ();
        model.addAttribute ("events", events);
        return "admin/events/list";
    }
    
    @GetMapping (value = "/view/{id}")
    public String views (@PathVariable Integer id, Model model) {
        Event event = new Event ();
        List<User> eventUsers = Collections.emptyList ();
        User user = new User ();
        try {
            event = eventService.findById (id);
            
            eventUsers = eventUserService.findEventUsersById (id);
            user = userService.getLoginUser ();
        } catch (DataNotFoundException e) {
            // TODO 自動生成された catch ブロック
            e.printStackTrace ();
        }
        model.addAttribute ("event", event);
        model.addAttribute ("eventUsers", eventUsers);
        model.addAttribute ("isJoin", isJoin (eventUsers, user));
        
        return "admin/events/detail";
    }
    
    /*
     * 新規作成画面表示
     */
    @GetMapping (value = "/create")
    public String form (Event event, Model model) {
        User user = userService.getLoginUser ();
        Integer userId = user.getId ();
        
        model.addAttribute ("userId", userId);
        model.addAttribute ("event", event);
        
        return "admin/events/create";
    }
    
    /*
     * 新規登録
     */
    @PostMapping (value = "/create")
    public String register (@Valid Event event, BindingResult result, Model model, RedirectAttributes ra) {
        FlashData flash;
        try {
            if (result.hasErrors ()) {
                return "admin/events/create";
            }
            // 新規登録
            eventService.save (event);
            flash = new FlashData ().success ("新規作成しました");
        } catch (Exception e) {
            flash = new FlashData ().danger ("処理中にエラーが発生しました");
        }
        ra.addFlashAttribute ("flash", flash);
        return "redirect:/admin/events/";
    }
    
    /*
     * 編集画面表示
     */
    @GetMapping (value = "/edit/{id}")
    public String edit (@PathVariable Integer id, Category category, Model model, RedirectAttributes ra) {
        try {
            // 存在確認
            Event event = eventService.findById (id);
            model.addAttribute ("event", event);
            
        } catch (Exception e) {
            FlashData flash = new FlashData ().danger ("該当データがありません");
            ra.addFlashAttribute ("flash", flash);
            return "redirect:/admin/customers";
        }
        User user = userService.getLoginUser ();
        
        Integer userId = user.getId ();
        
        model.addAttribute ("userId", userId);
        model.addAttribute ("category", category);
        return "admin/events/edit";
    }
    
    /*
     * 更新
     */
    @PostMapping (value = "/edit/{id}")
    public String update (@PathVariable Integer id, @Valid Event event, BindingResult result, Model model,
            RedirectAttributes ra) {
        FlashData flash;
        try {
            if (result.hasErrors ()) {
                return "admin/events/edit/" + id;
            }
            eventService.findById (id);
            // 更新
            eventService.save (event);
            flash = new FlashData ().success ("更新しました");
        } catch (Exception e) {
            flash = new FlashData ().danger ("該当データがありません");
        }
        ra.addFlashAttribute ("flash", flash);
        return "redirect:/admin/events/";
    }
    
    /*
     * 削除
     */
    @GetMapping (value = "/delete/{id}")
    public String delete (@PathVariable Integer id, Model model, RedirectAttributes ra) {
        FlashData flash;
        try {
            // if (result.hasErrors ()) {
            // return "admin/categories";
            // }
            // 更新
            eventService.deleteById (id);
            flash = new FlashData ().success ("更新しました");
        } catch (Exception e) {
            flash = new FlashData ().danger ("該当データがありません");
        }
        ra.addFlashAttribute ("flash", flash);
        return "redirect:/admin/events/mylist";
    }
    
    /*
     * マイリスト表示
     */
    @GetMapping (path = { "/mylist", "/mylist/" })
    public String myList (Model model) {
        User user = userService.getLoginUser ();
        
        List<Event> myEvents = eventService.findByUser (user);
        model.addAttribute ("myEvents", myEvents);
        return "admin/events/mylist";
    }
    
    private Boolean isJoin (List<User> eventUsers, User user) {
        return eventUsers.stream ().anyMatch (eventUser -> eventUser.getId () == user.getId ());
    }
    
}
