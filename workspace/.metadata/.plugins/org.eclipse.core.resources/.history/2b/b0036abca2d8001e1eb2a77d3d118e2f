package com.example.demo.web.admin;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.demo.common.DataNotFoundException;
import com.example.demo.common.FlashData;
import com.example.demo.entity.Event;
import com.example.demo.entity.EventUser;
import com.example.demo.entity.User;
import com.example.demo.service.EventService;
import com.example.demo.service.EventUserService;
import com.example.demo.service.UserService;

@Controller
@RequestMapping ("/admin/eventusers")
public class EventUsersController {
    @Autowired
    UserService userService;
    @Autowired
    EventService eventService;
    @Autowired
    EventUserService eventUserService;
    
    /**
     * イベント参加処理
     * 
     * @param  eventId               イベントID
     * @param  model                 モデル
     * @return
     * @throws DataNotFoundException
     */
    @GetMapping (value = "/create/{eventId}")
    public String register (@PathVariable Integer eventId, Model model, RedirectAttributes ra) throws Exception {
        FlashData flash;
        User user = new User ();
        Event event = new Event ();
        List<User> eventUsers = Collections.emptyList ();
        try {
            event = eventService.findById (eventId);
            user = userService.getLoginUser ();
            eventUsers = eventUserService.findEventUsersById (eventId);
            
            Integer status = enabledRegisterd (event, user, eventUsers);
            if (status == 0) {
                EventUser eventUser = makeEventUser (user, event);
                
                eventUserService.save (eventUser);
                flash = new FlashData ().success ("このイベントに参加しました。");
                
            } else if (status == 1) {
                System.out.println ("このユーザは、既に参加しています。メールアドレス： " + user.getUsername ());
                flash = new FlashData ().danger ("既に参加しています。");
                
            } else {
                flash = new FlashData ().danger ("参加者数が最大です。");
            }
        } catch (Exception e) {
            // TODO 自動生成された catch ブロック
            e.printStackTrace ();
            flash = new FlashData ().danger ("処理中にエラーが発生しました。");
            // throw e;
        }
        
        ra.addFlashAttribute ("flash", flash);
        return "redirect:/admin/events/view/" + eventId;
    }
    
    /**
     * イベント辞退処理
     * 
     * @param  eventId               イベントID
     * @param  model                 モデル
     * @return
     * @throws DataNotFoundException
     */
    @GetMapping (value = "/delete/{eventId}")
    public String delete (@PathVariable Integer eventId, Model model, RedirectAttributes ra) throws Exception {
        FlashData flash;
        User user = new User ();
        Event event = new Event ();
        try {
            event = eventService.findById (eventId);
            user = userService.getLoginUser ();
            
            EventUser eventUser = eventUserService.findby (user, event);
            
            eventUserService.deleteById (eventUser.getId ());
            flash = new FlashData ().success ("このイベントを辞退しました。");
            
        } catch (Exception e) {
            // TODO 自動生成された catch ブロック
            e.printStackTrace ();
            flash = new FlashData ().danger ("処理中にエラーが発生しました。");
        }
        
        ra.addFlashAttribute ("flash", flash);
        return "redirect:/admin/events/view/" + eventId;
    }
    
    private int enabledRegisterd (Event event, User user, List<User> eventUsers) {
        int maxParticipant = Integer.parseInt (event.getMaxParticipant ());
        
        boolean isJoin = eventUsers.stream ().anyMatch (eventUser -> eventUser.getId () == user.getId ());
        System.out.println ("isJoin: " + isJoin);
        if (isJoin) {
            return 1;
        }
        System.out.println ("maxParticipant: " + (maxParticipant));
        System.out.println ("eventUsers.size (): " + (eventUsers.size ()));
        if (maxParticipant <= eventUsers.size ()) {
            return 2;
        }
        return 0;
    }
    
    private EventUser makeEventUser (User user, Event event) {
        EventUser eventUser = new EventUser ();
        eventUser.setUser (user);
        eventUser.setEvent (event);
        return eventUser;
    }
}
